create schema dwh;

-- ************************************** dwh.dim_calendar
drop table if exists dwh.dim_calendar cascade;
CREATE TABLE dwh.dim_calendar
(
 "date"     date NOT NULL,
 "year"     int NOT NULL,
 quarter  int NOT NULL,
 "month"    varchar(50) NOT NULL,
 week_day varchar(50) NOT NULL,
 CONSTRAINT PK_9 PRIMARY KEY ( "date" ));

insert into dwh.dim_calendar 
select 
	date::date,
	EXTRACT(year FROM date) as "year",
	EXTRACT(quarter FROM date) as "quarter",
	EXTRACT(MONTH FROM date) as "month",
	to_char(date, 'dy') as week_day
from generate_series(date '2000-01-01', date '2030-01-01', interval '1 day') as "date";


-- ************************************** dwh.dim_geo
drop table if exists dwh.dim_geo cascade;
CREATE TABLE dwh.dim_geo
(
 geo_id      int NOT NULL,
 city        varchar(50) NOT NULL,
 "state"       varchar(50) NOT NULL,
 postal_code varchar(50) NOT NULL,
 region      varchar(50) NOT NULL,
 country     varchar(50) NOT NULL,
 CONSTRAINT PK_50 PRIMARY KEY ( geo_id )
);

-- then we test query "CREATE TABLE dwh.dim_customer", we found missed value. should update )
update stg.orders
set postal_code = '05401'
where city = 'Burlington' and postal_code is null;

insert into dwh.dim_geo
select 100+row_number() over(), city, "state", postal_code, region, country
from (select distinct city, "state", postal_code, region, country from stg.orders ) as geo_1;


-- ************************************** dwh.dim_customer
drop table if exists dwh.dim_customer cascade;
CREATE TABLE dwh.dim_customer
(
 customer_id   varchar(50) NOT NULL,
 customer_name varchar(50) NOT NULL,
 CONSTRAINT PK_42 PRIMARY KEY ( customer_id )
);
insert into dwh.dim_customer
select customer_id, customer_name  from (select distinct customer_id, customer_name from stg.orders ) as cust_1;


-- ************************************** dwh.dim_product
drop table if exists dwh.dim_product cascade;

CREATE TABLE dwh.dim_product
(
 prod_id	int NOT NULL,
 product_id   varchar(50) NOT NULL,
 product_name varchar(200) NOT NULL,
 category     varchar(50) NOT NULL,
 sub_category varchar(50) NOT NULL,
 segment       varchar(50) NOT NULL,
 CONSTRAINT PK_60 PRIMARY KEY ( prod_id )
);

insert into dwh.dim_product
select 100+row_number() over () as prod_id, product_id, product_name, category, subcategory, segment 
from (select distinct product_id, product_name, category, SubCategory, segment from stg.orders) as prod_1;


-- ************************************** dwh.dim_shipping
drop table if exists dwh.dim_shipping cascade;
CREATE TABLE dwh.dim_shipping
(
 ship_id        int NOT NULL,
 shipping_mode varchar(50) NOT NULL,
 CONSTRAINT PK_36 PRIMARY KEY ( ship_id )
);
-- INSERT unique value + generate ID
-- we get unique value from SHIP_MODE (columns) from ORDERS (table)
insert into dwh.dim_shipping
select 100+row_number() over(), ship_mode from (select distinct ship_mode from stg.orders) as ship_1;



-- ************************************** dwh.Orders_fact
drop table if exists dwh.dim_Orders_fact cascade;
CREATE TABLE dwh.dim_Orders_fact
(
 Row_ID      int NOT NULL,
 order_id    varchar(50) NOT NULL,
 prod_id  	 int NOT NULL,
 geo_id      int NOT NULL,
 customer_id varchar(50) NOT NULL,
 ship_id     int NOT NULL,
 ship_date   date NOT NULL,
 order_date  date NOT NULL,
 sales       numeric NOT NULL,
 quantity    int NOT NULL,
 discount    numeric NOT NULL,
 profit      numeric NOT NULL,
 CONSTRAINT PK_5 PRIMARY KEY ( Row_ID ),
 CONSTRAINT FK_21 FOREIGN KEY ( order_date ) REFERENCES dwh.dim_calendar ( "date" ),
 CONSTRAINT FK_31 FOREIGN KEY ( ship_date ) REFERENCES dwh.dim_calendar ( "date" ),
 CONSTRAINT FK_37 FOREIGN KEY ( ship_id ) REFERENCES dwh.dim_shipping ( ship_id ),
 CONSTRAINT FK_45 FOREIGN KEY ( customer_id ) REFERENCES dwh.dim_customer ( customer_id ),
 CONSTRAINT FK_55 FOREIGN KEY ( geo_id ) REFERENCES dwh.dim_geo ( geo_id ),
 CONSTRAINT FK_64 FOREIGN KEY ( prod_id ) REFERENCES dwh.dim_product ( prod_id )
);
CREATE INDEX FK_23 ON dwh.dim_Orders_fact
( order_date);
CREATE INDEX FK_33 ON dwh.dim_Orders_fact
( ship_date );
CREATE INDEX FK_39 ON dwh.dim_Orders_fact
( ship_id);
CREATE INDEX FK_47 ON dwh.dim_Orders_fact
( customer_id);
CREATE INDEX FK_57 ON dwh.dim_Orders_fact
(  geo_id );
CREATE INDEX FK_66 ON dwh.dim_Orders_fact
(  prod_id );

-- insert data in new table Orders_fact
 insert into dwh.dim_orders_fact
 select
	 100+row_number() over() as sales_id,
	 order_id,
	 prod_id,
	 geo_id,
	 o.customer_id,
	 ship_id,
	 ship_date,
	 order_date,
	 sales,
	 quantity,
	 discount,
	 round(profit,4)
 from stg.orders as o
inner join dwh.dim_shipping s on o.ship_mode = s.shipping_mode
inner join dwh.dim_geo as g on o.postal_code = g.postal_code and o.country=g.country and o.city=g.city and o.state=g.state
inner join dwh.dim_customer cd on cd.customer_id=o.customer_id and cd.customer_name=o.customer_name
inner join dwh.dim_product p on o.product_name = p.product_name and o.subcategory=p.sub_category and o.category=p.category 
							and o.product_id=p.product_id and o.segment=p.segment


select count(*) from dwh.dim_orders_fact o
inner join dwh.dim_customer c on c.customer_id=o.customer_id
inner join dwh.dim_geo g on g.geo_id=o.geo_id
inner join dwh.dim_product p on p.prod_id=o.prod_id
inner join dwh.dim_shipping s on s.ship_id=o.ship_id

select count(*) from stg.orders


